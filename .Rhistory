sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
lpR
lpR_1 <- -984.9866
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpStan
lpStan <- -894.5928
lpR
lpStan
lpR-lpStan
-2*log(gamma(1))- (2*N + 1)*log(sqrt(2*pi))
Pars[[1]]
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[1]])
uupars
upars
rstan_options(auto_write = TRUE)
# Compile the model
hnm_mod <- stan_model(file = "HierNorm.stan")
# Compile the model
hnm_mod <- stan_model(file = "HierNorm.stan")
# Construct log-posterior
hnm_data <- list(N = N, y = y)
hnm_fit <- sampling(hnm_mod, data = hnm_data, iter = 1,
verbose = TRUE, chains = 1,
init = list(list(lambda = 1, mu = rep(1.5,N),
tau_sq = 5, sigma_sq = 10)))
# log-post in R
require(invgamma)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
# Compile the model
hnm_mod <- stan_model(file = "HierNorm.stan")
require(rstan)
rstan_options(auto_write = TRUE)
# Compile the model
hnm_mod <- stan_model(file = "HierNorm.stan")
```{r Stanlp}
# Construct log-posterior
hnm_data <- list(N = N, y = y)
hnm_fit <- sampling(hnm_mod, data = hnm_data, iter = 1,
verbose = TRUE, chains = 1,
init = list(list(lambda = 1, mu = rep(1.5,N),
tau_sq = 5, sigma_sq = 10)))
# log-post in R
require(invgamma)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
-2*log(gamma(1))- (2*N + 1)*log(sqrt(2*pi))
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
# lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
# Hyper-prior:
# lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
#lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
# lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
#lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
# log-post in R
require(invgamma)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
# lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
#lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
#lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp <- sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
-(2*N + 1)*log(sqrt(2*pi))
log(1)
# log-post in R
require(invgamma)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
# lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
-(2*N + 1)*log(sqrt(2*pi))
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
-(2*N + 1)*log(sqrt(2*pi))
lpR-lpStan
-(2*N + 1)*log(sqrt(2*pi))
l <- list(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# log-post in R
require(invgamma)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
l <- list(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# Simulate parameter values:
# fixed lambda and tau_sq to get constant difference between
# R and stan
nsim <- 18
Pars <- replicate(n = nsim, expr = {
list(lambda = rexp(1), mu = rep(1,N),
tau_sq = 1, sigma_sq = 1)
}, simplify = FALSE)
# log-posterior calculation in R
lpR <- sapply(1:nsim, function(ii) {
lambda <- Pars[[ii]]$lambda
mu <- Pars[[ii]]$mu
tau_sq <- Pars[[ii]]$tau_sq
sigma_sq <- Pars[[ii]]$sigma_sq
logpost(lambda = lambda, mu = mu, tau_sq = tau_sq,
sigma_sq = sigma_sq, y = hnm_data$y)
})
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = l) #Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpR-lpStan
lpStan
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
-984.9866+894.5928
-(N )*log(sqrt(2*pi))
-(N +!)*log(sqrt(2*pi))
-(N +1)*log(sqrt(2*pi))
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
#lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp <- sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = l) #Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpStan
-1075.88+894.5928
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
tau_sq = 1, sigma_sq = 1, y)+894.5928
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)+894.5928
dnorm(1, log = TRUE)
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
#lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 1, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = l) #Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpStan
-984.9866+894.5928
logpost(lambda = 0, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
l <- list(lambda = 0, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = l) #Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpStan
984.9866-944.0928
logpost <- function(lambda, mu, tau_sq, sigma_sq, y) {
# Hyper-prior:
lp <- dinvgamma(tau_sq, shape = 1, scale = 1, log = TRUE)
lp + dnorm(lambda, log = TRUE)
# Prior:
lp + sum(dnorm(mu, mean = lambda, sd= sqrt(tau_sq), log = TRUE))
lp + dinvgamma(sigma_sq, shape = 1, scale = 1, log = TRUE)
# likelihood:
lp + sum(dnorm(y, mean = mu, sd = sqrt(sigma_sq), log = TRUE))
}
logpost(lambda = 0, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
l <- list(lambda = 0, mu = rep(1,N),
tau_sq = 1, sigma_sq = 1, y)
# log-posterior in Stan
lpStan <- sapply(1:nsim, function(ii) {
upars <- unconstrain_pars(object = hnm_fit, pars = l) #Pars[[ii]])
log_prob(object = hnm_fit, upars = upars, adjust_transform = FALSE)
})
lpStan
-984.9866
-984.9866+944.0928
